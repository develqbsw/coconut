package sk.qbsw.core.pay.base.csob;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.springframework.util.StreamUtils;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import static junit.framework.Assert.*;

import sk.qbsw.core.pay.base.PaymentRequestImpl;
import sk.qbsw.core.pay.base.PaymentProcessor;
import sk.qbsw.core.pay.base.PaymentProcessorFactory;
import sk.qbsw.core.pay.base.PaymentRequest;
import sk.qbsw.core.pay.base.csob.model.CsobGetCSOBResponce;
import sk.qbsw.core.pay.base.csob.model.CsobPayRequest;
import sk.qbsw.core.pay.base.csob.model.CsobResponseFromVOD;
import sk.qbsw.core.pay.base.exception.ConfigurationException;
import sk.qbsw.core.pay.base.util.PaymentFormatUtils;

public class CsobPaymentProcessorTest {

	private Certificate VODPubCert;
	private PrivateKey VODPrivateKey;
	private Certificate CsobCert;

	@Before
	public void init () throws CertificateException, IOException, NoSuchAlgorithmException, InvalidKeySpecException {
		// adds public VOD cert
		try (InputStream isVodCerPub = this.getClass().getResourceAsStream("vod.crt")) {
			VODPubCert = CertificateFactory.getInstance("X.509").generateCertificate(isVodCerPub);
			// adds private VOD key

			try (InputStream isVodPriv = this.getClass().getResourceAsStream("vod.pk8");
					ByteArrayOutputStream bis = new ByteArrayOutputStream()) {
				KeyFactory keyFactory = KeyFactory.getInstance("RSA");

				StreamUtils.copy(isVodPriv, bis);
				// if you have CERT with suffix .key it is likely it is in wrong
				// format
				// to make it usable for java convert it to pkcs#8
				// example call
				// openssl pkcs8 -topk8 -nocrypt -outform DER < vod.key >
				// vod.pk8
				KeySpec keySpec = new PKCS8EncodedKeySpec(bis.toByteArray());
				VODPrivateKey = keyFactory.generatePrivate(keySpec);

			}
		}

		// adds Public CSOB cert

		try (InputStream is = this.getClass().getResourceAsStream("ptcsobsk.cer")) {
			CsobCert = CertificateFactory.getInstance("X.509").generateCertificate(is);
		}

	}

	@Test

	public void testbasicVS() throws UnsupportedEncodingException {
		long millis = new DateTime().getMillis();

		String s = "" + millis;
		s = s.substring(1);
		s = s.substring(0, 10);

		s += s;

	}

	@Test

	public void testAsymCrypto() throws UnsupportedEncodingException {
		String resp = "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soap:Body> <GetCSOBResponce xmlns=\"csob/webservices/OFResponce\"><Status>1</Status><Splatnost>10.12.2016</Splatnost > <VS>123456</VS><OF>nvm</OF> <Castka>15.20</Castka> </GetCSOBResponce></soap:Body></soap:Envelope>";
		// String resp = "<xml>";
		byte[] bankIsSending = CsobUtils.encryptWithPrivateKey(resp.getBytes("UTF-8"), VODPrivateKey);

		byte[] bankDecodedMSg = CsobUtils.decryptWithPublicKey(bankIsSending, VODPubCert.getPublicKey());

		String respDec = new String(bankDecodedMSg, "UTF-8");
		assertEquals(resp, respDec);
	}

	@Test
	public void testAsymCrypto2() throws UnsupportedEncodingException {
		String resp = "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soap:Body> <GetCSOBResponce xmlns=\"csob/webservices/OFResponce\"><Status>1</Status><Splatnost>10.12.2016</Splatnost > <VS>123456</VS><OF>nvm</OF> <Castka>15.20</Castka> </GetCSOBResponce></soap:Body></soap:Envelope>";
		// String resp = "<xml>";
		byte[] bankIsSending = CsobUtils.encryptWithPublicKey(resp.getBytes("UTF-8"), VODPubCert.getPublicKey());

		byte[] bankDecodedMSg = CsobUtils.decryptWithPrivateKey(bankIsSending, VODPrivateKey);

		String respDec = new String(bankDecodedMSg, "UTF-8");
		assertEquals(resp, respDec);
	}

	@Test
	public void testMakeResponse() throws UnsupportedEncodingException {
		String resp = "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soap:Body> <GetCSOBResponce xmlns=\"csob/webservices/OFResponce\"><Status>1</Status><Splatnost>10.12.2016</Splatnost > <VS>123456</VS><OF>nvm</OF> <Castka>15.20</Castka> </GetCSOBResponce></soap:Body></soap:Envelope>";

		byte[] bankIsSending = CsobUtils.encryptWithPrivateKey(resp.getBytes("UTF-8"), VODPrivateKey);
		String base64String = Base64.getEncoder().encodeToString(bankIsSending);
		String envelope = "<messageBody><Data>" + base64String
				+ "</Data><TransactionID>123456</TransactionID></messageBody>";
		byte[] bankIsSending2 = CsobUtils.encryptWithPublicKey(envelope.getBytes("UTF-8"), VODPubCert.getPublicKey());

		base64String = Base64.getEncoder().encodeToString(bankIsSending2);
	}

	@Test
	@Ignore
	public void testCreateMessage() throws UnsupportedEncodingException {
		String msg = "<zprava ofce='3111'><obchodnik><id>1388</id><urlObchodnika>https://formulare.qtri.sk/pt</urlObchodnika></obchodnik><data><nProtiucet>4006183141</nProtiucet><chKodBankaProti>7500</chKodBankaProti><nCastka>0,01</nCastka><nKS></nKS><chVS>1234567890</chVS><nSS></nSS><vchPoleAV1>#1388</vchPoleAV1><vchPoleAV2>Test Qtri</vchPoleAV2><vchPoleAV3></vchPoleAV3><vchPoleAV4></vchPoleAV4></data></zprava>";
		byte[] ba = CsobUtils.signWithPrivateKeyBC(msg.getBytes("UTF-8"), VODPubCert, VODPrivateKey);
		// byte[] ba = CsobUtils.signWithPrivateKey(msg.getBytes("UTF-8"),
		// VODPrivateKey);
		String result = Base64.getEncoder().encodeToString(ba);

		String expResult = "MIIJawYJKoZIhvcNAQcCoIIJXDCCCVgCAQExCzAJBgUrDgMCGgUAMIIBnAYJKoZI"
				+ "hvcNAQcBoIIBjQSCAYk8enByYXZhIG9mY2U9JzMxMTEnPjxvYmNob2RuaWs+PGlk"
				+ "PjEzODg8L2lkPjx1cmxPYmNob2RuaWthPmh0dHBzOi8vZm9ybXVsYXJlLnF0cmku"
				+ "c2svcHQ8L3VybE9iY2hvZG5pa2E+PC9vYmNob2RuaWs+PGRhdGE+PG5Qcm90aXVj"
				+ "ZXQ+NDAwNjE4MzE0MTwvblByb3RpdWNldD48Y2hLb2RCYW5rYVByb3RpPjc1MDA8"
				+ "L2NoS29kQmFua2FQcm90aT48bkNhc3RrYT4wLDAxPC9uQ2FzdGthPjxuS1M+PC9u"
				+ "S1M+PGNoVlM+MTIzNDU2Nzg5MDwvY2hWUz48blNTPjwvblNTPjx2Y2hQb2xlQVYx"
				+ "PiMxMzg4PC92Y2hQb2xlQVYxPjx2Y2hQb2xlQVYyPlRlc3QgUXRyaTwvdmNoUG9s"
				+ "ZUFWMj48dmNoUG9sZUFWMz48L3ZjaFBvbGVBVjM+PHZjaFBvbGVBVjQ+PC92Y2hQ"
				+ "b2xlQVY0PjwvZGF0YT48L3pwcmF2YT6gggVqMIIFZjCCBE6gAwIBAgIQJWQRpJzg"
				+ "pO8RAAukAJi3yzANBgkqhkiG9w0BAQsFADBHMQswCQYDVQQGEwJVUzEWMBQGA1UE"
				+ "ChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXUmFwaWRTU0wgU0hBMjU2IENBIC0g"
				+ "RzIwHhcNMTYwNjA3MDAwMDAwWhcNMTcwNjA3MjM1OTU5WjAUMRIwEAYDVQQDDAkq"
				+ "LnF0cmkuc2swggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/S/Wr+BNP"
				+ "9R6gXn+FEjQDNb7XjiJF/nEhPumUfYBkrBKKqic/tM24Q265zi2uB7p8bbjgSySL"
				+ "c6Z1yKhSIgBvUsVSdz6khWTuae+jkKWuw1iwwmMb+NklWDLIf+ee9duW/66NbWy7"
				+ "gxPLH++7kX2+pqW1QBDf2aOcZHOXVjXYhw/vpcoNC8LeBIgqyA7uc5pxp3yA7o0N"
				+ "Gm9d98Oq8rpz0h+fI+rWJtXRzPRrULfcetMPthMOgCAL6gs7y9qjLWYanxs8XL/l"
				+ "Qsrxx1SxuX6srB5/9zIza9VNn7DRisvuAva1dyBtX0c208cHxhQk0aSJhrC5PE6t"
				+ "ZPvaR+pOiaJjAgMBAAGjggJ/MIICezAdBgNVHREEFjAUggkqLnF0cmkuc2uCB3F0"
				+ "cmkuc2swCQYDVR0TBAIwADArBgNVHR8EJDAiMCCgHqAchhpodHRwOi8vZ3Muc3lt"
				+ "Y2IuY29tL2dzLmNybDBvBgNVHSAEaDBmMGQGBmeBDAECATBaMCoGCCsGAQUFBwIB"
				+ "Fh5odHRwczovL3d3dy5yYXBpZHNzbC5jb20vbGVnYWwwLAYIKwYBBQUHAgIwIAwe"
				+ "aHR0cHM6Ly93d3cucmFwaWRzc2wuY29tL2xlZ2FsMB8GA1UdIwQYMBaAFEz0v+g7"
				+ "vsIk8xtHO7VuSI4Wq68SMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEF"
				+ "BQcDAQYIKwYBBQUHAwIwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUFBzABhhNodHRw"
				+ "Oi8vZ3Muc3ltY2QuY29tMCYGCCsGAQUFBzAChhpodHRwOi8vZ3Muc3ltY2IuY29t"
				+ "L2dzLmNydDCCAQYGCisGAQQB1nkCBAIEgfcEgfQA8gB3AN3rHSt6DU+mIIuBrYFo"
				+ "cH4ujp0B1VyIjT0RxM227L7MAAABVSqgUHUAAAQDAEgwRgIhAMMQZ7VSugs2b9f5"
				+ "0Cp2XG6hNopuWxrNxY4MF1yENyjhAiEA1Gd6A0Oxk0En8DnCF5HFzRL8lHfFUTHV"
				+ "H9r9XUrJa24AdwCkuQmQtBhYFIe7E6LMZ3AKPDWYBPkb37jjd80OyA3cEAAAAVUq"
				+ "oFEWAAAEAwBIMEYCIQDOwvkKvdQBHvwKEpXOIq4Ym7WlujdzpXYMeyicycWAQgIh"
				+ "AJEqzkfOa76LHBpm/Nb5a6p3qzzqnnjvOywiSbxPSatJMA0GCSqGSIb3DQEBCwUA"
				+ "A4IBAQBHQF78I9YbLYfZkAoxLpR9QGSi6ek08jleN9f2I4/BvjTlrXbiRrQrr+Q2"
				+ "JoiGa7nDsDrL22yKyVEEGf9vHv9p2iqKJCEwgqvFp2HUiA3qaPLl6gOifUlDdejJ"
				+ "h7C7W4t+eLUVFxHuAu/BKX7JRlHTi7U5qcAZChr4acjDW2TM8nP6UmXS5lwEfg5n"
				+ "waZ5ZcRCR3bmpCVd6PK0ir55kjrk6Ancn1DKXpg1sdR4HMYrRECrBP9y/YsBlw44"
				+ "FLQoHrTsjuZ8N+r0r0F5g3tbKG1W0jIfXTyF0kKk9MPPOV2i5atY5aZX1R2jHGjf"
				+ "NkHOfa90BpnUVLEmf/Li2F5IbNZ9MYICNjCCAjICAQEwWzBHMQswCQYDVQQGEwJV"
				+ "UzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXUmFwaWRTU0wgU0hB"
				+ "MjU2IENBIC0gRzICECVkEaSc4KTvEQALpACYt8swCQYFKw4DAhoFAKCBsTAYBgkq"
				+ "hkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNzA1MDExODMy"
				+ "NTZaMCMGCSqGSIb3DQEJBDEWBBT3vddXlhZ6OcynMZUDRccpoyvpnjBSBgkqhkiG"
				+ "9w0BCQ8xRTBDMAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIAgDANBggqhkiG9w0D"
				+ "AgIBQDAHBgUrDgMCBzANBggqhkiG9w0DAgIBKDANBgkqhkiG9w0BAQEFAASCAQCo"
				+ "1pYv4wWPCQPu1BIj7E7QnokaejeKefDruzjSxikvSvO649d6de7LjMTokVr5Bu/C"
				+ "EbSUulnf5glkuHv61yrww4hI5inQFPkx/Z4bArOQk4HORdt1xVZay7M975Fn8bSl"
				+ "OT/QzCjkY7qM9SygHrLWBrT9VoHMWYan8Eszamzp2Md9CodqBngsIUl/6080uIwD"
				+ "f1LZvGe83STvU06uTV+8rDCOU5HnW8cSOebHuLrxLjFR2tIh4NNteQZx8SmlNABz"
				+ "sAEdamTbQtjriVqecEfmC7SwAHQOaVYQuaNmyhS8MPSImrmx7rzXawPXlWvvgguU" + "Zokdv2r8XFvBp0nTghxK";
		System.out.println("result    computed length " + result.length());
		System.out.println("expresult computed length " + expResult.length());

		System.out.println("rozdiel stringov je " + StringUtils.getLevenshteinDistance(result, expResult));
		byte[] expBa = Base64.getDecoder().decode(expResult);
		assertEquals(expResult, result);
	}

	@Test
	public void testResponseFrombank() throws UnsupportedEncodingException, SAXException {
		// z banky prijate

		// CSOB payment call recieved
		// <messageToVOD><Channel>CSOB_PT</Channel><Body>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</Body></messageToVOD>
		// CSOB message parsed to
		// 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
		// CSOB - message to VOD from bank Body raw
		// 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
		// PAYMENT CSOB - channel CSOB_PT
		// PAYMENT CSOB - decrypted BODY
		// <messageBody><TransactionID>208274168</TransactionID><Data>
		// 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
		// </Data></messageBody>
		// PAYMENT CSOB - transactionId 208274168
		String msg = "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";

		byte[] ba = CsobUtils.extractAndVerifyData(java.util.Base64.getDecoder().decode(msg), CsobCert);
		String result = new String(ba, "UTF-8");
		System.out.println("result ->" + result);
		CsobGetCSOBResponce responce = CsobPaymentProcessor.extractXmlData(result);
		org.junit.Assert.assertEquals("OK", responce.getStatus());
		org.junit.Assert.assertEquals("4945765452", responce.getVs());
	}

	@Test

	public void testVerifyMessage() throws UnsupportedEncodingException {

		// String expResult =
		// "MIIJawYJKoZIhvcNAQcCoIIJXDCCCVgCAQExCzAJBgUrDgMCGgUAMIIBnAYJKoZI" +
		// "hvcNAQcBoIIBjQSCAYk8enByYXZhIG9mY2U9JzMxMTEnPjxvYmNob2RuaWs+PGlk" +
		// "PjEzODg8L2lkPjx1cmxPYmNob2RuaWthPmh0dHBzOi8vZm9ybXVsYXJlLnF0cmku" +
		// "c2svcHQ8L3VybE9iY2hvZG5pa2E+PC9vYmNob2RuaWs+PGRhdGE+PG5Qcm90aXVj" +
		// "ZXQ+NDAwNjE4MzE0MTwvblByb3RpdWNldD48Y2hLb2RCYW5rYVByb3RpPjc1MDA8" +
		// "L2NoS29kQmFua2FQcm90aT48bkNhc3RrYT4wLDAxPC9uQ2FzdGthPjxuS1M+PC9u" +
		// "S1M+PGNoVlM+MTIzNDU2Nzg5MDwvY2hWUz48blNTPjwvblNTPjx2Y2hQb2xlQVYx" +
		// "PiMxMzg4PC92Y2hQb2xlQVYxPjx2Y2hQb2xlQVYyPlRlc3QgUXRyaTwvdmNoUG9s" +
		// "ZUFWMj48dmNoUG9sZUFWMz48L3ZjaFBvbGVBVjM+PHZjaFBvbGVBVjQ+PC92Y2hQ" +
		// "b2xlQVY0PjwvZGF0YT48L3pwcmF2YT6gggVqMIIFZjCCBE6gAwIBAgIQJWQRpJzg" +
		// "pO8RAAukAJi3yzANBgkqhkiG9w0BAQsFADBHMQswCQYDVQQGEwJVUzEWMBQGA1UE" +
		// "ChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXUmFwaWRTU0wgU0hBMjU2IENBIC0g" +
		// "RzIwHhcNMTYwNjA3MDAwMDAwWhcNMTcwNjA3MjM1OTU5WjAUMRIwEAYDVQQDDAkq" +
		// "LnF0cmkuc2swggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/S/Wr+BNP"
		// + "9R6gXn+FEjQDNb7XjiJF/nEhPumUfYBkrBKKqic/tM24Q265zi2uB7p8bbjgSySL"
		// + "c6Z1yKhSIgBvUsVSdz6khWTuae+jkKWuw1iwwmMb+NklWDLIf+ee9duW/66NbWy7"
		// + "gxPLH++7kX2+pqW1QBDf2aOcZHOXVjXYhw/vpcoNC8LeBIgqyA7uc5pxp3yA7o0N"
		// + "Gm9d98Oq8rpz0h+fI+rWJtXRzPRrULfcetMPthMOgCAL6gs7y9qjLWYanxs8XL/l"
		// + "Qsrxx1SxuX6srB5/9zIza9VNn7DRisvuAva1dyBtX0c208cHxhQk0aSJhrC5PE6t"
		// + "ZPvaR+pOiaJjAgMBAAGjggJ/MIICezAdBgNVHREEFjAUggkqLnF0cmkuc2uCB3F0"
		// + "cmkuc2swCQYDVR0TBAIwADArBgNVHR8EJDAiMCCgHqAchhpodHRwOi8vZ3Muc3lt"
		// + "Y2IuY29tL2dzLmNybDBvBgNVHSAEaDBmMGQGBmeBDAECATBaMCoGCCsGAQUFBwIB"
		// + "Fh5odHRwczovL3d3dy5yYXBpZHNzbC5jb20vbGVnYWwwLAYIKwYBBQUHAgIwIAwe"
		// + "aHR0cHM6Ly93d3cucmFwaWRzc2wuY29tL2xlZ2FsMB8GA1UdIwQYMBaAFEz0v+g7"
		// + "vsIk8xtHO7VuSI4Wq68SMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEF"
		// + "BQcDAQYIKwYBBQUHAwIwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUFBzABhhNodHRw"
		// + "Oi8vZ3Muc3ltY2QuY29tMCYGCCsGAQUFBzAChhpodHRwOi8vZ3Muc3ltY2IuY29t"
		// + "L2dzLmNydDCCAQYGCisGAQQB1nkCBAIEgfcEgfQA8gB3AN3rHSt6DU+mIIuBrYFo"
		// + "cH4ujp0B1VyIjT0RxM227L7MAAABVSqgUHUAAAQDAEgwRgIhAMMQZ7VSugs2b9f5"
		// + "0Cp2XG6hNopuWxrNxY4MF1yENyjhAiEA1Gd6A0Oxk0En8DnCF5HFzRL8lHfFUTHV"
		// + "H9r9XUrJa24AdwCkuQmQtBhYFIe7E6LMZ3AKPDWYBPkb37jjd80OyA3cEAAAAVUq"
		// + "oFEWAAAEAwBIMEYCIQDOwvkKvdQBHvwKEpXOIq4Ym7WlujdzpXYMeyicycWAQgIh"
		// + "AJEqzkfOa76LHBpm/Nb5a6p3qzzqnnjvOywiSbxPSatJMA0GCSqGSIb3DQEBCwUA"
		// + "A4IBAQBHQF78I9YbLYfZkAoxLpR9QGSi6ek08jleN9f2I4/BvjTlrXbiRrQrr+Q2"
		// + "JoiGa7nDsDrL22yKyVEEGf9vHv9p2iqKJCEwgqvFp2HUiA3qaPLl6gOifUlDdejJ"
		// + "h7C7W4t+eLUVFxHuAu/BKX7JRlHTi7U5qcAZChr4acjDW2TM8nP6UmXS5lwEfg5n"
		// + "waZ5ZcRCR3bmpCVd6PK0ir55kjrk6Ancn1DKXpg1sdR4HMYrRECrBP9y/YsBlw44"
		// + "FLQoHrTsjuZ8N+r0r0F5g3tbKG1W0jIfXTyF0kKk9MPPOV2i5atY5aZX1R2jHGjf"
		// + "NkHOfa90BpnUVLEmf/Li2F5IbNZ9MYICNjCCAjICAQEwWzBHMQswCQYDVQQGEwJV"
		// + "UzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXUmFwaWRTU0wgU0hB"
		// + "MjU2IENBIC0gRzICECVkEaSc4KTvEQALpACYt8swCQYFKw4DAhoFAKCBsTAYBgkq"
		// + "hkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNzA1MDExODMy"
		// + "NTZaMCMGCSqGSIb3DQEJBDEWBBT3vddXlhZ6OcynMZUDRccpoyvpnjBSBgkqhkiG"
		// + "9w0BCQ8xRTBDMAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIAgDANBggqhkiG9w0D"
		// + "AgIBQDAHBgUrDgMCBzANBggqhkiG9w0DAgIBKDANBgkqhkiG9w0BAQEFAASCAQCo"
		// + "1pYv4wWPCQPu1BIj7E7QnokaejeKefDruzjSxikvSvO649d6de7LjMTokVr5Bu/C"
		// + "EbSUulnf5glkuHv61yrww4hI5inQFPkx/Z4bArOQk4HORdt1xVZay7M975Fn8bSl"
		// + "OT/QzCjkY7qM9SygHrLWBrT9VoHMWYan8Eszamzp2Md9CodqBngsIUl/6080uIwD"
		// + "f1LZvGe83STvU06uTV+8rDCOU5HnW8cSOebHuLrxLjFR2tIh4NNteQZx8SmlNABz"
		// + "sAEdamTbQtjriVqecEfmC7SwAHQOaVYQuaNmyhS8MPSImrmx7rzXawPXlWvvgguU"
		// + "Zokdv2r8XFvBp0nTghxK";
		String expResult = "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"

		;
		byte[] ba = CsobUtils.extractAndVerifyData(java.util.Base64.getDecoder().decode(expResult), VODPubCert);
		String string = new String(ba, "UTF-8");
		String exp = "<zprava ofce='3111'><obchodnik><id>1388</id><urlObchodnika>https://formulare.qtri.sk/pt</urlObchodnika></obchodnik><data><nProtiucet>4006183141</nProtiucet><chKodBankaProti>7500</chKodBankaProti><nCastka>0,01</nCastka><nKS></nKS><chVS>1234567890</chVS><nSS></nSS><vchPoleAV1>#1388</vchPoleAV1><vchPoleAV2>Test Qtri</vchPoleAV2><vchPoleAV3></vchPoleAV3><vchPoleAV4></vchPoleAV4></data></zprava>";
		System.out.println("decoded result " + string);

		org.junit.Assert.assertEquals(exp, string);
	}

	@Test
	@Ignore
	public void testEncryptSignedContentWithCSOBCert() throws UnsupportedEncodingException {
		// encrption produces correct different results for every iteration.

		String signedEnvelope = "<signed><id>987</id><message>MIIJaQYJKoZIhvcNAQcCoIIJWjCCCVYCAQExCzAJBgUrDgMCGgUAMIIBmgYJKoZI"
				+ "hvcNAQcBoIIBiwSCAYc8enByYXZhIG9mY2U9JzMxMTEnPjxvYmNob2RuaWs+PGlk"
				+ "PjEzODg8L2lkPjx1cmxPYmNob2RuaWthPmh0dHBzOi8vZG9ja2llLmRlbW8ucWJz"
				+ "dy5zazwvdXJsT2JjaG9kbmlrYT48L29iY2hvZG5paz48ZGF0YT48blByb3RpdWNl"
				+ "dD40MDA2MTgzMTQxPC9uUHJvdGl1Y2V0PjxjaEtvZEJhbmthUHJvdGk+NzUwMDwv"
				+ "Y2hLb2RCYW5rYVByb3RpPjxuQ2FzdGthPjAsMDE8L25DYXN0a2E+PG5LUz48L25L"
				+ "Uz48Y2hWUz4xMjM0NTY3ODkwPC9jaFZTPjxuU1M+PC9uU1M+PHZjaFBvbGVBVjE+"
				+ "IzEzODg8L3ZjaFBvbGVBVjE+PHZjaFBvbGVBVjI+VGVzdFF0cmk8L3ZjaFBvbGVB"
				+ "VjI+PHZjaFBvbGVBVjM+PC92Y2hQb2xlQVYzPjx2Y2hQb2xlQVY0PjwvdmNoUG9s"
				+ "ZUFWND48L2RhdGE+PC96cHJhdmE+oIIFajCCBWYwggROoAMCAQICECVkEaSc4KTv"
				+ "EQALpACYt8swDQYJKoZIhvcNAQELBQAwRzELMAkGA1UEBhMCVVMxFjAUBgNVBAoT"
				+ "DUdlb1RydXN0IEluYy4xIDAeBgNVBAMTF1JhcGlkU1NMIFNIQTI1NiBDQSAtIEcy"
				+ "MB4XDTE2MDYwNzAwMDAwMFoXDTE3MDYwNzIzNTk1OVowFDESMBAGA1UEAwwJKi5x"
				+ "dHJpLnNrMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv0v1q/gTT/Ue"
				+ "oF5/hRI0AzW+144iRf5xIT7plH2AZKwSiqonP7TNuENuuc4trge6fG244Eski3Om"
				+ "dcioUiIAb1LFUnc+pIVk7mnvo5ClrsNYsMJjG/jZJVgyyH/nnvXblv+ujW1su4MT"
				+ "yx/vu5F9vqaltUAQ39mjnGRzl1Y12IcP76XKDQvC3gSIKsgO7nOacad8gO6NDRpv"
				+ "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"
				+ "PvHBem+IwiEQG37PYg==</message></signed>";
		String resultEnc = Base64.getEncoder().encodeToString(
				CsobUtils.encryptWithPublicKey(signedEnvelope.getBytes("UTF-8"), CsobCert.getPublicKey()));

		String resultExp = "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";
		org.junit.Assert.assertEquals(resultExp, resultEnc);
	}

	@Test
	public void testCreatetestingXMLSOAPRESPONSE() throws UnsupportedEncodingException {
		// encrption produces correct different results for every iteration.
		// sign w. vodprivate
		// encrypt w. Vod public
		String xml1 = "<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\r\n"
				+ "<soap:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \r\n"
				+ " xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \r\n"
				+ " xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\r\n" + "  <soap:Body>\r\n"
				+ "    <GetCSOBResponce xmlns=\\\"csob/webservices/OFResponce\\\">\r\n" + "      <Status></Status>\r\n"
				+ "      <Splatnost></Splatnost >\r\n" + "      <VS></VS>\r\n" + "      <OF></OF>\r\n"
				+ "      <Castka></Castka>\r\n" + "    </GetCSOBResponce>\r\n" + "  </soap:Body>\r\n"
				+ "</soap:Envelope>\r\n" + "";
		String xml1Enc = Base64.getEncoder()
				.encodeToString(CsobUtils.signWithPrivateKeyBC(xml1.getBytes("UTF-8"), VODPubCert, VODPrivateKey));
		String xml2 = "<messageBody><TransactionID>123456</TransactionID><Data>" + xml1Enc + "</Data></messageBody>";
		String xml2Enc = Base64.getEncoder()
				.encodeToString(CsobUtils.encryptWithPublicKey(xml2.getBytes("UTF-8"), VODPubCert.getPublicKey()));
		String xml3 = "<messageToVOD>\r\n" + "	<Channel>CSOB_PT</Channel>\r\n" + "	<Body>" + xml2Enc + "</Body>\r\n"
				+ "</messageToVOD>\r\n";

		System.out.println(xml3);

	}

	@Test
	public void testResponseFromVodXMLStructure() {
		CsobResponseFromVOD fromVOD = new CsobResponseFromVOD();
		fromVOD.setStatus("0");
		fromVOD.setTransactionId("123");

		String msg = "<responseFromVOD>" + "<Channel>CSOB_PT</Channel>" + "<ErrorMessage></ErrorMessage>"
				+ "<Status>0</Status>" + "<TransactionID>123</TransactionID>" + "</responseFromVOD>";

		assertEquals(msg, fromVOD.toXMLString());
	}
	
	
	@Test
	public void testRequestToCsobXmlStructure1() {
		CsobPayRequest pay = new CsobPayRequest();
		pay.setMerchantId("1388");
		pay.setMerchantAccount("123456789");
		pay.setMerchantBankNo("7500");
		pay.setSum("10.02");

		
		pay.setVs("123456789");
		pay.setSs("123456789");
		pay.setKs("123");
		pay.setNote("po 35 znakoch podelene");
		pay.setUrlRedirect("http://qbsw.sk/id=123");

		
		
		String msg = "<zprava ofce=\"3111\"><obchodnik>"
				+ "<id>1388</id>"
				+ "<urlObchodnika>http://qbsw.sk/id=123</urlObchodnika></obchodnik>"
				+ "<data>"
				+ "<nProtiucet>123456789</nProtiucet><chKodBankaProti>7500</chKodBankaProti><nCastka>10.02</nCastka><nKS>123</nKS><chVS>123456789</chVS><nSS>123456789</nSS>"
				+ "<vchPoleAV1>#1388</vchPoleAV1><vchPoleAV2>po 35 znakoch podelene</vchPoleAV2></data></zprava>";
		assertEquals(msg, pay.createCompleteXML());
	}
	@Test
	public void testRequestToCsobXmlStructure2() {
		CsobPayRequest pay = new CsobPayRequest();
		pay.setMerchantId("1388");
		pay.setMerchantAccount("123456789");
		pay.setMerchantBankNo("7500");
		pay.setSum("10.02");
		
		
		pay.setVs("123456789");
		pay.setSs("123456789");
		pay.setKs("123");
		pay.setNote("po 35 znakoch podelene toto budu 2 casti. ");
		pay.setUrlRedirect("http://qbsw.sk/id=123");
		
		
		
		String msg = "<zprava ofce=\"3111\"><obchodnik><id>1388</id><urlObchodnika>http://qbsw.sk/id=123</urlObchodnika></obchodnik>"
				+ "<data><nProtiucet>123456789</nProtiucet><chKodBankaProti>7500</chKodBankaProti><nCastka>10.02</nCastka><nKS>123</nKS><chVS>123456789</chVS><nSS>123456789</nSS>"
				+ "<vchPoleAV1>#1388</vchPoleAV1><vchPoleAV2>po 35 znakoch podelene toto budu 2 </vchPoleAV2><vchPoleAV3>casti. </vchPoleAV3></data></zprava>";
		assertEquals(msg, pay.createCompleteXML());
	}
	
	@Test
	public void testRequestToCsobXmlStructure3() {
		CsobPayRequest pay = new CsobPayRequest();
		pay.setMerchantId("1388");
		pay.setMerchantAccount("123456789");
		pay.setMerchantBankNo("7500");
		pay.setSum("10.02");
		
		
		pay.setVs("123456789");
		pay.setSs("123456789");
		pay.setKs("123");
		pay.setNote("po 35 znakoch podelene toto budu 2 casti. Dalzie znaky by sa mali rozdelit na dalsi 35 znakovy");
		pay.setUrlRedirect("http://qbsw.sk/id=123");
		
		
		
		String msg = "<zprava ofce=\"3111\"><obchodnik><id>1388</id><urlObchodnika>http://qbsw.sk/id=123</urlObchodnika></obchodnik><data><nProtiucet>123456789</nProtiucet>"
				+ "<chKodBankaProti>7500</chKodBankaProti><nCastka>10.02</nCastka><nKS>123</nKS><chVS>123456789</chVS><nSS>123456789</nSS>"
				+ "<vchPoleAV1>#1388</vchPoleAV1>"
				+ "<vchPoleAV2>po 35 znakoch podelene toto budu 2 </vchPoleAV2><vchPoleAV3>casti. Dalzie znaky by sa mali rozd</vchPoleAV3><vchPoleAV4>elit na dalsi 35 znakovy</vchPoleAV4></data></zprava>";
		assertEquals(msg, pay.createCompleteXML());
	}
	@Test(expected= ConfigurationException.class )
	public void testRequestToCsobXmlStructureFail() {
		CsobPayRequest pay = new CsobPayRequest();
		pay.setMerchantId("1388");
		pay.setMerchantAccount("123456789");
		pay.setMerchantBankNo("7500");
		pay.setSum("10.02");
		
		
		pay.setVs("123456789");
		pay.setSs("123456789");
		pay.setKs("123");
		pay.setNote("po 35 znakoch podelene toto budu 2 casti. Dalzie znaky by sa mali rozdelit na dalsi 35 znakovy - toto by uz malo padnut lebo je poznamka velmi dlha");
		pay.setUrlRedirect("http://qbsw.sk/id=123");
		
		//will fail
		pay.createCompleteXML();

	}

	@Test
	public void testPaymentCreate() {
		PaymentProcessorFactory factory = getFactory();
		PaymentProcessor paymentProcessor = factory.createPaymentProcessor();
		PaymentRequest req=new PaymentRequestImpl();
		paymentProcessor.createPayment(req);
		
		
	}
	
	

	private PaymentProcessorFactory getFactory ()
	{
		return new CsobPaymentProcessorFactoryImpl(null);
	}
	
	

}
